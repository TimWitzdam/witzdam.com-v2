---
interface Props {
  id: string;
  type: astroHTML.JSX.HTMLInputTypeAttribute;
  placeholder?: string;
  value?: string;
  fullWidth?: boolean;
  inputMode?:
    | "none"
    | "text"
    | "tel"
    | "url"
    | "email"
    | "numeric"
    | "decimal"
    | "search"
    | undefined
    | null;
  pattern?: string;
  disabled?: boolean;
}

const {
  id,
  type,
  placeholder,
  value,
  fullWidth,
  inputMode,
  pattern,
  disabled,
} = Astro.props;
---

<script define:vars={{ id, disabled }}>
  if (disabled) return;

  document.addEventListener("DOMContentLoaded", () => {
    const input = document.getElementById(id);
    const button = input.nextElementSibling;

    button.addEventListener("click", () => {
      input.value = "";
      input.focus();
    });
  });
</script>

<div
  class="relative border-2 border-white w-fit rounded-xl focus-within:bg-white focus-within:bg-opacity-10 transition-all flex items-center pr-4"
  class:list={[{ "w-full": fullWidth, "bg-white bg-opacity-10": disabled }]}
>
  <input
    class="outline-none bg-transparent p-3 px-6 w-full"
    id={id}
    type={type}
    placeholder={placeholder}
    value={value}
    inputmode={inputMode}
    pattern={pattern}
    disabled={disabled}
  />
  {
    !disabled && (
      <div class="input-clear rounded-full w-6 h-6 grid place-content-center bg-white text-black font-bold text-sm transition-transform ease-in-out ml-auto cursor-pointer">
        X
      </div>
    )
  }
</div>

<style>
  input:placeholder-shown + div {
    transform: scale(0);
    pointer-events: none;
  }
</style>
