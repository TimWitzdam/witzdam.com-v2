---
import Layout from "../../../../layouts/Layout.astro";
import BaseInput from "../../../../components/BaseInput.astro";
import BaseButton from "../../../../components/BaseButton.astro";
import CrossIcon from "../../../../../public/icons/cross.svg?raw";
import SwapIcon from "../../../../../public/icons/swap.svg?raw";
import { buildBreadcrumb } from "../../../../glob_vars";
import BreadCrumb from "../../../../components/BreadCrumb.astro";

const api_address = import.meta.env.PUBLIC_API_ADDRESS;

const selectOptions = [
  {
    value: "string",
    text: "String",
  },
  {
    value: "hex",
    text: "Hex",
  },
  {
    value: "base64",
    text: "Base64",
  },
];

const from = Astro.url.pathname.split("/")[4].split("-")[0];
const to = Astro.url.pathname.split("/")[4].split("-")[2];

const fromOption = selectOptions.find((option) => option.value === from);
const toOption = selectOptions.find((option) => option.value === to);

if (!fromOption || !toOption) {
  return Astro.redirect("/tools");
}

function getName(direction: string, small?: boolean) {
  if (!fromOption || !toOption) return "";
  if (direction === "from") {
    if (small) {
      return fromOption.text[0].toLowerCase() + fromOption.text.slice(1);
    } else {
      return fromOption.text;
    }
  } else {
    if (small) {
      return toOption.text[0].toLowerCase() + toOption.text.slice(1);
    } else {
      return toOption.text;
    }
  }
}
---

<script define:vars={{ api_address, from, to }}>
  document.addEventListener("DOMContentLoaded", () => {
    const inputValue = document.getElementById("input-value");
    const firstValue = document.getElementById("first-value");
    const copyFirst = document.getElementById("copy-first");
    const resetButton = document.getElementById("reset-button");
    const swapButton = document.getElementById("swap-button");
    const toSelect = document.getElementById("to-select");
    const fromSelect = document.getElementById("from-select");
    var first = false;

    inputValue.addEventListener("input", (e) => {
      if (!first) {
        fetch(`${api_address}/tools/inc`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            tool: `${from}-to-${to}`,
          }),
        }).catch((err) => console.log(err));
        first = true;
      }
      let value = e.target.value;

      if (value.length > 0) {
        const hex = Array.from(value)
          .map((char) => char.charCodeAt(0).toString(16))
          .join("");
        firstValue.value = `0x${hex}`;
      } else {
        firstValue.value = "";
      }
    });

    resetButton.addEventListener("click", () => {
      inputValue.value = "";
      firstValue.value = "";
    });

    swapButton.addEventListener("click", () => {
      const from = fromSelect.value;
      const to = toSelect.value;
      window.location.href = `/tools/coding/converter/${to}-to-${from}`;
    });

    copyFirst.addEventListener("click", () => {
      const tempInput = document.createElement("input");
      tempInput.value = firstValue.value;
      document.body.appendChild(tempInput);
      tempInput.select();
      document.execCommand("copy");
      document.body.removeChild(tempInput);
    });

    toSelect.addEventListener("change", () => {
      console.log("toSelect change");
      const from = fromSelect.value;
      const to = toSelect.value;
      window.location.href = `/tools/coding/converter/${from}-to-${to}`;
    });

    fromSelect.addEventListener("change", () => {
      console.log("fromSelect change");
      const from = fromSelect.value;
      const to = toSelect.value;
      window.location.href = `/tools/coding/converter/${from}-to-${to}`;
    });
  });
</script>

<title>
  {getName("from")} To {getName("to")} Converter - Tim's Tools
</title>
<meta
  name="description"
  content=`Convert ${getName("from", true)} to ${getName("to", true)}. Updates the result live as you type.`
/>
<meta
  name="og:title"
  content=`Convert ${getName("from")} to ${getName("to")}. Updates the result live as you type.`
/>
<meta
  name="og:description"
  content=`Convert ${getName("from", true)} to ${getName("to", true)}. Updates the result live as you type.`
/>
<Layout current="/tools">
  <div class="mt-20 mb-16 max-w-4xl mx-auto px-6">
    <BreadCrumb urls={buildBreadcrumb("coding", "converter")} />
    <div class="text-center mb-10 mt-4">
      <h1 class="text-5xl font-bold mb-4">
        {getName("from")} To {getName("to")} Converter
      </h1>
      <p class="text-lg md:w-2/3 mx-auto">
        Convert {getName("from", true)} to
        {getName("to", true)}.
      </p>
    </div>

    <div class="max-w-xl mx-auto text-lg">
      <div class="flex gap-4 mb-4">
        <div class="w-1/2">
          <label for="from-select" class="text-xl font-bold">From</label>
          <select
            id="from-select"
            class="mt-2 w-full bg-transparent p-4 border-2 border-white rounded-xl outline-none focus-within:bg-white focus-within:bg-opacity-10 transition-all"
          >
            {
              selectOptions.map((option) =>
                option.value == to ? null : (
                  <option value={option.value} selected={option.value === from}>
                    {option.text}
                  </option>
                )
              )
            }
          </select>
        </div>
        <div class="w-1/2">
          <label for="to-select" class="text-xl font-bold">To</label>
          <select
            id="to-select"
            class="mt-2 w-full bg-transparent p-4 border-2 border-white rounded-xl outline-none focus-within:bg-white focus-within:bg-opacity-10 transition-all"
          >
            {
              selectOptions.map((option) =>
                option.value == from ? null : (
                  <option value={option.value} selected={option.value === to}>
                    {option.text}
                  </option>
                )
              )
            }
          </select>
        </div>
      </div>
      <label for="input-value" class="text-xl font-bold"
        >{getName("from")} value</label
      >
      <div class="mt-2 flex flex-col gap-4 mb-4 md:flex-row">
        <BaseInput id="input-value" type="text" fullWidth autocomplete="off" />
      </div>
      <div class="mb-10 flex flex-col items-center gap-4 sm:flex-row">
        <BaseButton text="Reset" id="reset-button" fullWidth icon>
          <Fragment set:html={CrossIcon} slot="before-icon" />
        </BaseButton>
        <BaseButton text="Swap" id="swap-button" fullWidth icon>
          <Fragment set:html={SwapIcon} slot="before-icon" />
        </BaseButton>
      </div>
      <div class="mb-4">
        <label for="first-value" class="text-xl font-bold"
          >{getName("to")} value</label
        >
        <div
          class="mt-2 flex flex-col items-center gap-2 whitespace-nowrap sm:flex-row"
        >
          <BaseInput id="first-value" type="text" disabled fullWidth />
          <div class="w-full mt-2 sm:w-fit sm:mt-0">
            <BaseButton text="Copy value" id="copy-first" fullWidth />
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>
