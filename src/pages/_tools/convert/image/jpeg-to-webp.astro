---
import Layout from "../../../../layouts/Layout.astro";
import BaseButton from "../../../../components/BaseButton.astro";
import UploadIcon from "../../../../../public/icons/upload.svg?raw";
import LockIcon from "../../../../../public/icons/lock.svg?raw";
import LockOpenIcon from "../../../../../public/icons/lock-open.svg?raw";
import DeleteCrossIcon from "../../../../../public/icons/delete-cross.svg?raw";
import ConfirmedCheckmarkIcon from "../../../../../public/icons/confirmed-checkmark.svg?raw";
import DownloadIcon from "../../../../../public/icons/download.svg?raw";
import UploadIconSmall from "../../../../../public/icons/upload-small.svg?raw";
import { buildBreadcrumb } from "../../../../glob_vars";
import BreadCrumb from "../../../../components/BreadCrumb.astro";

const api_address = import.meta.env.PUBLIC_API_ADDRESS;
---

<script
  define:vars={{
    api_address,
    ConfirmedCheckmarkIcon,
    DeleteCrossIcon,
    DownloadIcon,
  }}
>
  document.addEventListener("DOMContentLoaded", () => {
    const controlsElement = document.querySelector("#controls");
    const filesElement = document.querySelector("#files");
    const filesContent = document.querySelector("#files-content");
    const fileSelector = document.querySelector("input[type=file]");
    const dragDropArea = document.querySelector("#dragDropArea");
    let privacyCheckbox = document.querySelector("#privacy-checkbox");

    function addImageBox(imageSrc, fileName) {
      fileName = fileName.replace(/\.[^/.]+$/, "") + ".webp";
      let imageBox = document.createElement("div");
      imageBox.classList.add(
        "flex",
        "flex-col",
        "items-center",
        "justify-between",
        "gap-4",
        "w-full",
        "min-[444px]:flex-row"
      );

      let imageContainer = document.createElement("div");
      imageContainer.classList.add("flex", "gap-2");

      let imageWrapper = document.createElement("div");
      imageWrapper.classList.add(
        "border",
        "border-white",
        "rounded-xl",
        "p-2",
        "w-[73px]",
        "h-[73px]",
        "flex",
        "items-center",
        "justify-center"
      );

      let image = document.createElement("img");
      image.src = imageSrc;
      image.classList.add("object-contain", "max-w-[55px]", "max-h-[55px]");

      let imageInfo = document.createElement("div");

      let imageName = document.createElement("b");
      imageName.classList.add("text-lg");
      imageName.textContent = fileName;

      let imageStatus = document.createElement("div");
      imageStatus.classList.add("flex", "items-center", "flex-wrap", "gap-2");

      let imageStatusText = document.createElement("p");
      imageStatusText.textContent = "Ready to download";

      let imageStatusIcon = document.createElement("div");
      imageStatusIcon.innerHTML = ConfirmedCheckmarkIcon;

      imageStatus.appendChild(imageStatusText);
      imageStatus.appendChild(imageStatusIcon);

      imageInfo.appendChild(imageName);
      imageInfo.appendChild(imageStatus);

      imageWrapper.appendChild(image);

      imageContainer.appendChild(imageWrapper);
      imageContainer.appendChild(imageInfo);

      let buttonContainer = document.createElement("div");
      buttonContainer.classList.add("flex", "items-center", "gap-2", "text-xl");
      let downloadBtn = document.createElement("button");
      downloadBtn.innerHTML = DownloadIcon;
      downloadBtn.classList.add(
        "hover:scale-125",
        "transition-transform",
        "p-2"
      );
      downloadBtn.addEventListener("click", () => {
        let link = document.createElement("a");
        link.setAttribute("href", imageSrc);
        link.setAttribute("download", fileName);
        link.click();
      });
      let deleteBtn = document.createElement("button");
      deleteBtn.innerHTML = DeleteCrossIcon;
      deleteBtn.classList.add("hover:scale-125", "transition-transform", "p-2");
      deleteBtn.addEventListener("click", () => deleteImage(imageBox));

      buttonContainer.appendChild(downloadBtn);
      buttonContainer.appendChild(deleteBtn);

      imageBox.appendChild(imageContainer);
      imageBox.appendChild(buttonContainer);

      return imageBox;
    }

    function dragenter(e) {
      e.stopPropagation();
      e.preventDefault();
      dragDropArea.classList.add("border-green-500");
    }

    function dragover(e) {
      e.stopPropagation();
      e.preventDefault();
      dragDropArea.classList.add("border-green-500");
    }

    function dragLeave(e) {
      e.stopPropagation();
      e.preventDefault();
      dragDropArea.classList.remove("border-green-500");
    }

    function setDragDrop(area) {
      area.addEventListener("dragenter", dragenter, false);
      area.addEventListener("dragover", dragover, false);
      area.addEventListener("dragleave", dragLeave, false);
      area.addEventListener("drop", drop, false);
    }

    setDragDrop(document.documentElement);

    function deleteImage(imageBox) {
      imageBox.remove();
      if (filesElement.children.length === 0) {
        filesElement.classList.add("hidden");
        controlsElement.classList.add("hidden");
        controlsElement.classList.remove("flex");
        dragDropArea.classList.remove("hidden");
      }
    }

    function togglePrivacyMode() {
      let privacyText = document.querySelector("#privacy-text");
      let privacyDisclaimer = document.querySelector(
        "#privacy-mode-disclaimer"
      );

      if (privacyCheckbox.checked) {
        privacyText.textContent = "Privacy Mode on";
        privacyDisclaimer.style.display = "block";
      } else {
        privacyText.textContent = "Privacy Mode off";
        privacyDisclaimer.style.display = "none";
      }
    }

    privacyCheckbox.addEventListener("change", togglePrivacyMode);

    function clearImages() {
      filesContent.innerHTML = "";
      filesElement.classList.add("hidden");
      controlsElement.classList.add("hidden");
      controlsElement.classList.remove("flex");
      dragDropArea.classList.remove("hidden");
    }

    function downloadImages() {
      let images = filesContent.querySelectorAll("img");

      for (let image of images) {
        let link = document.createElement("a");
        link.setAttribute("href", image.src);
        const fileName =
          image.parentElement.parentElement.querySelector("b").textContent;
        link.setAttribute("download", fileName);
        link.click();
      }
    }

    document
      .querySelector("#clear-images")
      .addEventListener("click", clearImages);

    document
      .querySelector("#download")
      .addEventListener("click", downloadImages);

    document
      .querySelector("#add-more")
      .addEventListener("click", () =>
        document.querySelector("#fileInput").click()
      );

    // Local image processing (Privacy Mode)
    function processFile(file) {
      if (!file) {
        return;
      }

      // Check if the file is an image
      if (!file.type.startsWith("image/")) {
        alert("Please upload an image file.");
        return;
      }

      let imageBox = document.querySelector("#files");

      // Load the data into an image
      new Promise(function (resolve, reject) {
        let reader = new FileReader();

        reader.onload = function (e) {
          let rawImage = new Image();

          rawImage.addEventListener("load", function () {
            resolve(rawImage);
          });

          rawImage.src = e.target.result;
        };

        reader.readAsDataURL(file);
      })
        .then(function (rawImage) {
          // Convert image to webp ObjectURL via a canvas blob
          return new Promise(function (resolve, reject) {
            let canvas = document.createElement("canvas");
            let ctx = canvas.getContext("2d");

            canvas.width = rawImage.width;
            canvas.height = rawImage.height;
            ctx.drawImage(rawImage, 0, 0);

            canvas.toBlob(function (blob) {
              resolve(URL.createObjectURL(blob));
            }, "image/webp");
          });
        })
        .then(function (imageURL) {
          // Load image for display on the page
          return new Promise(function (resolve, reject) {
            let scaledImg = new Image();

            scaledImg.addEventListener("load", function () {
              resolve({ imageURL, scaledImg });
            });

            scaledImg.setAttribute("src", imageURL);
          });
        })
        .then(function (data) {
          // Inject into the DOM
          filesContent.appendChild(addImageBox(data.imageURL, file.name));
        });
    }

    function processFiles(files) {
      controlsElement.classList.remove("hidden");
      controlsElement.classList.add("flex");
      filesElement.classList.remove("hidden");
      dragDropArea.classList.add("hidden");

      for (let file of files) {
        processFile(file);
      }
    }

    function fileSelectorChanged() {
      if (privacyCheckbox.checked) {
        processFiles(fileSelector.files);
      } else {
        apiProcessFiles(fileSelector.files);
      }
      fileSelector.value = "";
    }

    fileSelector.addEventListener("change", fileSelectorChanged);

    // API image processing (default)
    function apiProcessFiles(files) {
      controlsElement.classList.remove("hidden");
      controlsElement.classList.add("flex");
      filesElement.classList.remove("hidden");
      dragDropArea.classList.add("hidden");
      document.querySelector("#loading").classList.remove("hidden");

      const fetchPromises = [];

      for (let file of files) {
        let formData = new FormData();
        formData.append("image", file);

        fetchPromises.push(
          fetch(api_address + "/tools/jpeg-to-webp", {
            method: "POST",
            body: formData,
          })
            .then((response) => {
              // Check if the response is JSON (error) or a blob/image (success)
              const contentType = response.headers.get("content-type");
              if (contentType && contentType.includes("application/json")) {
                return response.json();
              } else {
                return response.blob();
              }
            })
            .then((data) => {
              if (data instanceof Blob) {
                const imageURL = URL.createObjectURL(data);
                filesContent.appendChild(addImageBox(imageURL, file.name));
              } else {
                controlsElement.classList.add("hidden");
                controlsElement.classList.remove("flex");
                filesElement.classList.add("hidden");
                dragDropArea.classList.remove("hidden");
                alert(data.message);
              }
            })
            .catch((error) => {
              console.error("Error:", error);
            })
        );
      }

      // Use Promise.all to wait for all promises to settle before hiding the loading spinner
      Promise.all(fetchPromises)
        .then(() => {
          document.querySelector("#loading").classList.add("hidden");
        })
        .catch((error) => {
          console.error("Error in Promise.all:", error);
        });
    }

    function drop(e) {
      e.stopPropagation();
      e.preventDefault();
      dragDropArea.classList.remove("border-green-500");
      if (privacyCheckbox.checked) {
        processFiles(e.dataTransfer.files);
      } else {
        apiProcessFiles(e.dataTransfer.files);
      }
    }
  });
</script>

<title>JPEG To WEBP Image Converter - Tim's Tools</title>
<meta
  name="description"
  content="JPEG To WEBP Image Converter lets you convert JPEG images to WEBP images. It's completely free and has a privacy mode built in."
/>
<meta name="og:title" content="JPEG To WEBP Image Converter - Tim's Tools" />
<meta
  name="og:description"
  content="JPEG To WEBP Image Converter lets you convert JPEG images to WEBP images. It's completely free and has a privacy mode built in."
/>
<Layout current="/tools">
  <div class="mt-20 mb-16 max-w-4xl mx-auto px-6">
    <BreadCrumb urls={buildBreadcrumb("convert", "image")} />
    <div class="text-center mb-10 mt-4">
      <h1 class="text-5xl font-bold mb-4">JPEG To WEBP Image Converter</h1>
      <p class="text-lg md:w-2/3 mx-auto">
        Converts one or multiple JPEG images to WEBP images.
      </p>
    </div>
    <div class="flex items-center gap-2 mb-6">
      <label class="lock-container hover:scale-110 transition-transform">
        <input type="checkbox" id="privacy-checkbox" />
        <div class="lock-open">
          <Fragment set:html={LockOpenIcon} />
        </div>
        <div class="lock">
          <Fragment set:html={LockIcon} />
        </div>
      </label>
      <p id="privacy-text">Privacy Mode off</p>
    </div>
    <div
      id="privacy-mode-disclaimer"
      class="hidden w-full border-2 border-white rounded-xl p-4 mb-6"
    >
      <p>
        <strong>Privacy Mode</strong> is a feature that allows you to convert images
        to WebP without uploading them to a server. This means that your images never
        leave your computer.
      </p>
      <br />
      <p>
        <strong>Privacy Mode</strong> may not work in your browser. If you're experiencing
        issues, try disabling this feature.
      </p>
    </div>
    <div
      class="hidden items-center gap-4 flex-col md:flex-row-reverse whitespace-nowrap mb-6"
      id="controls"
    >
      <div
        class="w-full flex flex-col items-center gap-4 justify-end md:flex-row md:mb-0"
      >
        <div class="w-full md:w-fit">
          <BaseButton
            id="clear-images"
            text="Clear Images"
            textColor="red"
            fullWidth
            icon
          >
            <Fragment set:html={DeleteCrossIcon} slot="before-icon" />
          </BaseButton>
        </div>
        <div class="w-full md:w-fit">
          <BaseButton
            id="download"
            text="Download"
            textColor="green"
            fullWidth
            icon
          >
            <Fragment set:html={DownloadIcon} slot="after-icon" />
          </BaseButton>
        </div>
      </div>
      <div class="w-full md:w-fit">
        <BaseButton id="add-more" text="Add more images" fullWidth icon>
          <Fragment set:html={UploadIconSmall} slot="before-icon" />
        </BaseButton>
      </div>
    </div>
    <div id="files" class="hidden border-2 border-white rounded-xl p-6">
      <div id="files-content" class="flex flex-col gap-6"></div>
      <div id="loading" class="hidden my-6">
        <div class="flex justify-center">
          <div
            class="animate-spin rounded-full h-16 w-16 border-b-2 border-white"
          >
          </div>
        </div>
      </div>
    </div>

    <label
      for="fileInput"
      class="bg-[#444444] border-2 border-dashed border-white rounded-xl p-10 flex flex-col items-center justify-center gap-4 cursor-pointer"
      id="dragDropArea"
    >
      <input type="file" id="fileInput" style="display: none;" multiple />
      <Fragment set:html={UploadIcon} />
      <p class="text-center">Drag & Drop or Click to Select Image</p>
    </label>
  </div>
</Layout>

<style>
  .lock-container {
    --color: white;
    --size: 20px;
    width: var(--size);
    height: var(--size) * 1.5;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    font-size: var(--size);
    fill: var(--color);
  }

  .lock-container .lock-open {
    animation: keyframes-fill 0.5s;
  }

  .lock-container .lock {
    display: none;
    animation: keyframes-fill 0.5s;
  }

  .lock-container input:checked ~ .lock-open {
    display: none;
  }

  .lock-container input:checked ~ .lock {
    display: block;
  }

  .lock-container input {
    opacity: 0;
    height: 0;
    width: 0;
  }

  @keyframes keyframes-fill {
    0% {
      transform: scale(0);
      opacity: 0;
    }

    50% {
      transform: scale(1.2);
    }
  }
</style>
