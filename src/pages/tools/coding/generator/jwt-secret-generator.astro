---
import Layout from "../../../../layouts/Layout.astro";
import BaseInput from "../../../../components/BaseInput.astro";
import BaseButton from "../../../../components/BaseButton.astro";
import { buildBreadcrumb } from "../../../../glob_vars";
import BreadCrumb from "../../../../components/BreadCrumb.astro";
---

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const lengthInput = document.getElementById(
      "length-input"
    ) as HTMLInputElement;
    const result = document.getElementById("result");
    const resultText = document.getElementById("result-text");
    const copyButton = document.getElementById("copy");
    const errorText = document.getElementById("error-text");

    if (!lengthInput || !result || !resultText || !copyButton || !errorText)
      return;

    function generateSecureHex(length: number) {
      if (!window.crypto || !window.crypto.getRandomValues) {
        throw new Error("Secure random API not available in this environment.");
      }

      const bytesNeeded = Math.ceil(length / 2);
      const bytes = new Uint8Array(bytesNeeded);
      window.crypto.getRandomValues(bytes);

      let hex = Array.from(bytes)
        .map((b) => b.toString(16).padStart(2, "0"))
        .join("");

      if (hex.length > length) hex = hex.slice(0, length);
      return hex;
    }

    document.querySelector("form")?.addEventListener("submit", (e) => {
      e.preventDefault();
      const length = parseInt(lengthInput.value, 10);
      errorText.classList.add("hidden");

      if (!Number.isFinite(length) || isNaN(length)) {
        errorText.textContent = "Please enter a valid number for length.";
        errorText.classList.remove("hidden");
        return;
      }

      if (length < 1) {
        errorText.textContent = "Length must be greater than 0.";
        errorText.classList.remove("hidden");
        return;
      }

      const MAX_LENGTH = 4096;
      if (length > MAX_LENGTH) {
        errorText.textContent = `Length must be at most ${MAX_LENGTH}.`;
        errorText.classList.remove("hidden");
        return;
      }

      try {
        const secret = generateSecureHex(length);
        resultText.textContent = secret;
        result.classList.remove("hidden");
      } catch (err: any) {
        errorText.textContent =
          err?.message ?? "Failed to generate secure secret.";
        errorText.classList.remove("hidden");
      }
    });

    copyButton.addEventListener("click", async () => {
      const text = resultText.textContent ?? "";

      if (navigator.clipboard && navigator.clipboard.writeText) {
        try {
          await navigator.clipboard.writeText(text);
        } catch (_) {
          const el = document.createElement("textarea");
          el.value = text;
          document.body.appendChild(el);
          el.select();
          document.execCommand("copy");
          document.body.removeChild(el);
        }
      } else {
        const el = document.createElement("textarea");
        el.value = text;
        document.body.appendChild(el);
        el.select();
        document.execCommand("copy");
        document.body.removeChild(el);
      }

      const copySpan = copyButton.querySelector("span");
      if (copySpan) {
        copySpan.textContent = "Copied!";
        setTimeout(() => {
          copySpan.textContent = "Copy";
        }, 2500);
      }
    });
  });
</script>

<title>JWT Secret Generator - Tim's Tools</title>
<meta
  name="description"
  content="The JWT Secret Generator creates secure JWT secrets for your applications. Generate strong and random secrets to enhance the security of your JSON Web Tokens."
/>
<meta name="og:title" content="JWT Secret Generator - Tim's Tools" />
<meta
  name="og:description"
  content="The JWT Secret Generator creates secure JWT secrets for your applications. Generate strong and random secrets to enhance the security of your JSON Web Tokens."
/>
<Layout current="/tools">
  <div class="mt-20 mb-16 max-w-4xl mx-auto px-6">
    <BreadCrumb urls={buildBreadcrumb("coding", "generator")} />
    <div class="text-center mb-10 mt-4">
      <h1 class="text-5xl font-bold mb-4">JWT Secret Generator</h1>
      <p class="text-lg md:w-2/3 mx-auto">Generate a secure JWT secret</p>
    </div>

    <form>
      <label for="length-input" class="text-xl font-bold">Length</label>
      <div class="mt-4 mb-8">
        <BaseInput
          id="length-input"
          type="number"
          value="32"
          placeholder="Enter the length of the JWT secret"
          fullWidth
        />
      </div>
      <p id="error-text" class="text-red-500 font-bold hidden mb-8"></p>
      <BaseButton text="Generate" fullWidth />
    </form>

    <div id="result" class="mt-10 hidden">
      <h2 class="font-bold text-2xl mb-2">Result</h2>
      <p
        id="result-text"
        class="mb-4 text-center font-bold text-xl break-words"
      >
      </p>
      <BaseButton id="copy" text="Copy" fullWidth />
    </div>
  </div>
</Layout>
